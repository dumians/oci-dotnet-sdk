/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.ObjectstorageService.Models
{
    /// <summary>
    /// To use any of the API operations, you must be authorized in an IAM policy. If you are not authorized,
    /// talk to an administrator. If you are an administrator who needs to write policies to give users access, see
    /// [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
    /// 
    /// </summary>
    public class ObjectLifecycleRule 
    {
        
        /// <value>
        /// The name of the lifecycle rule to be applied.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <value>
        /// 
        /// </value>
        [JsonProperty(PropertyName = "target")]
        public string Target { get; set; }

        /// <value>
        /// The action of the object lifecycle policy rule. Rules using the action 'ARCHIVE' move objects into the
        /// [Archive Storage tier](https://docs.cloud.oracle.com/Content/Archive/Concepts/archivestorageoverview.htm). Rules using the action
        /// 'DELETE' permanently delete objects from buckets. Rules using 'ABORT' abort the uncommitted multipart-uploads
        /// and permanently delete their parts from buckets. 'ARCHIVE', 'DELETE' and 'ABORT' are the only three supported
        /// actions at this time.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Action is required.")]
        [JsonProperty(PropertyName = "action")]
        public string Action { get; set; }

        /// <value>
        /// Specifies the age of objects to apply the rule to. The timeAmount is interpreted in units defined by the
        /// timeUnit parameter, and is calculated in relation to each object's Last-Modified time.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeAmount is required.")]
        [JsonProperty(PropertyName = "timeAmount")]
        public System.Nullable<long> TimeAmount { get; set; }
        ///
        /// <value>
        /// The unit that should be used to interpret timeAmount.  Days are defined as starting and ending at midnight UTC.
        /// Years are defined as 365.2425 days long and likewise round up to the next midnight UTC.
        /// 
        /// </value>
        ///
        public enum TimeUnitEnum {
            [EnumMember(Value = "DAYS")]
            Days,
            [EnumMember(Value = "YEARS")]
            Years
        };

        /// <value>
        /// The unit that should be used to interpret timeAmount.  Days are defined as starting and ending at midnight UTC.
        /// Years are defined as 365.2425 days long and likewise round up to the next midnight UTC.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeUnit is required.")]
        [JsonProperty(PropertyName = "timeUnit")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<TimeUnitEnum> TimeUnit { get; set; }

        /// <value>
        /// A Boolean that determines whether this rule is currently enabled.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IsEnabled is required.")]
        [JsonProperty(PropertyName = "isEnabled")]
        public System.Nullable<bool> IsEnabled { get; set; }

        [JsonProperty(PropertyName = "objectNameFilter")]
        public ObjectNameFilter ObjectNameFilter { get; set; }
    }
}
