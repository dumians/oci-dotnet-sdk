/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.ResourcemanagerService.Models
{
    /// <summary>
    /// Property details for the configuration source used for the stack.
    /// 
    /// </summary>
    [JsonConverter(typeof(CreateConfigSourceDetailsModelConverter))]
    public class CreateConfigSourceDetails 
    {
        
        /// <value>
        /// Specifies the `configSourceType` for uploading the Terraform configuration.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ConfigSourceType is required.")]
        [JsonProperty(PropertyName = "configSourceType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ConfigSource.ConfigSourceTypeEnum> ConfigSourceType { get; set; }

        /// <value>
        /// File path to the directory from which Terraform runs.
        /// If not specified, the root directory is used.
        /// This parameter is ignored for the `configSourceType` value of `COMPARTMENT_CONFIG_SOURCE`.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "workingDirectory")]
        public string WorkingDirectory { get; set; }
    }

    public class CreateConfigSourceDetailsModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(CreateConfigSourceDetails);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(CreateConfigSourceDetails);
            var discriminator = jsonObject["configSourceType"].Value<string>();
            switch (discriminator)
            {
                case "ZIP_UPLOAD":
                    obj = new CreateZipUploadConfigSourceDetails();
                    break;
                case "GIT_CONFIG_SOURCE":
                    obj = new CreateGitConfigSourceDetails();
                    break;
                case "COMPARTMENT_CONFIG_SOURCE":
                    obj = new CreateCompartmentConfigSourceDetails();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
