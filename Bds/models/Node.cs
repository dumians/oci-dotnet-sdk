/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.BdsService.Models
{
    /// <summary>
    /// Specific info about a node
    /// </summary>
    public class Node 
    {
        
        /// <value>
        /// The OCID of the underlying compute instance
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InstanceId is required.")]
        [JsonProperty(PropertyName = "instanceId")]
        public string InstanceId { get; set; }

        /// <value>
        /// The name of the node
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        ///
        /// <value>
        /// The state of the node
        /// </value>
        ///
        public enum LifecycleStateEnum {
            [EnumMember(Value = "CREATING")]
            Creating,
            [EnumMember(Value = "ACTIVE")]
            Active,
            [EnumMember(Value = "INACTIVE")]
            Inactive,
            [EnumMember(Value = "UPDATING")]
            Updating,
            [EnumMember(Value = "DELETING")]
            Deleting,
            [EnumMember(Value = "DELETED")]
            Deleted,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "STOPPING")]
            Stopping,
            [EnumMember(Value = "STARTING")]
            Starting
        };

        /// <value>
        /// The state of the node
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<LifecycleStateEnum> LifecycleState { get; set; }
        ///
        /// <value>
        /// BDS instance node type
        /// </value>
        ///
        public enum NodeTypeEnum {
            [EnumMember(Value = "MASTER")]
            Master,
            [EnumMember(Value = "EDGE")]
            Edge,
            [EnumMember(Value = "UTILITY")]
            Utility,
            [EnumMember(Value = "WORKER")]
            Worker,
            [EnumMember(Value = "BURSTING")]
            Bursting,
            [EnumMember(Value = "CLOUD_SQL")]
            CloudSql
        };

        /// <value>
        /// BDS instance node type
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NodeType is required.")]
        [JsonProperty(PropertyName = "nodeType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<NodeTypeEnum> NodeType { get; set; }

        /// <value>
        /// Shape of the node
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Shape is required.")]
        [JsonProperty(PropertyName = "shape")]
        public string Shape { get; set; }

        /// <value>
        /// The list of block volumes attached to a given node.
        /// </value>
        [JsonProperty(PropertyName = "attachedBlockVolumes")]
        public System.Collections.Generic.List<VolumeAttachmentDetail> AttachedBlockVolumes { get; set; }

        /// <value>
        /// The OCID of the subnet in which the node should be created
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SubnetId is required.")]
        [JsonProperty(PropertyName = "subnetId")]
        public string SubnetId { get; set; }

        /// <value>
        /// IP address of the node
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "IpAddress is required.")]
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <value>
        /// The fully-qualified hostname (FQDN) of the node
        /// </value>
        [JsonProperty(PropertyName = "hostname")]
        public string Hostname { get; set; }

        /// <value>
        /// The OCID of the image from which the node was created
        /// </value>
        [JsonProperty(PropertyName = "imageId")]
        public string ImageId { get; set; }

        /// <value>
        /// The fingerprint of the SSH key used for node access
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SshFingerprint is required.")]
        [JsonProperty(PropertyName = "sshFingerprint")]
        public string SshFingerprint { get; set; }

        /// <value>
        /// The name of the availability domain the node is running in
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "AvailabilityDomain is required.")]
        [JsonProperty(PropertyName = "availabilityDomain")]
        public string AvailabilityDomain { get; set; }

        /// <value>
        /// The name of the fault domain the node is running in
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "FaultDomain is required.")]
        [JsonProperty(PropertyName = "faultDomain")]
        public string FaultDomain { get; set; }

        /// <value>
        /// The time the node was created. An RFC3339 formatted datetime string
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }

        /// <value>
        /// The time the BDS instance was updated. An RFC3339 formatted datetime string
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
    }
}
