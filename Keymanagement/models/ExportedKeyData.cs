/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.KeymanagementService.Models
{
    /// <summary>
    /// The response to a request to export key material.
    /// </summary>
    public class ExportedKeyData 
    {
        
        /// <value>
        /// The OCID of the key version.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "KeyVersionId is required.")]
        [JsonProperty(PropertyName = "keyVersionId")]
        public string KeyVersionId { get; set; }

        /// <value>
        /// The OCID of the master encryption key associated with this key version.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "KeyId is required.")]
        [JsonProperty(PropertyName = "keyId")]
        public string KeyId { get; set; }

        /// <value>
        /// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeCreated is required.")]
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }

        /// <value>
        /// The OCID of the vault that contains this key version.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "VaultId is required.")]
        [JsonProperty(PropertyName = "vaultId")]
        public string VaultId { get; set; }

        /// <value>
        /// The base64-encoded exported key material, which is encrypted by using the public RSA wrapping key specified in the export request.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "EncryptedKey is required.")]
        [JsonProperty(PropertyName = "encryptedKey")]
        public string EncryptedKey { get; set; }
        ///
        /// <value>
        /// The encryption algorithm to use to encrypt exportable key material from a key that persists on the server (as opposed to a key that 
        /// persists on a hardware security module and, therefore, cannot be exported). Specifying `RSA_OAEP_AES_SHA256` invokes the RSA AES key 
        /// wrap mechanism, which generates a temporary AES key. The temporary AES key is wrapped by the RSA public wrapping key provided along 
        /// with the request, creating a wrapped temporary AES key. The temporary AES key is also used to wrap the exportable key material. The 
        /// wrapped temporary AES key and the wrapped exportable key material are concatenated, producing concatenated blob output that jointly 
        /// represents them. Specifying `RSA_OAEP_SHA256` means that the exportable key material is wrapped by the RSA public wrapping key provided 
        /// along with the request.
        /// 
        /// </value>
        ///
        public enum AlgorithmEnum {
            [EnumMember(Value = "RSA_OAEP_AES_SHA256")]
            RsaOaepAesSha256,
            [EnumMember(Value = "RSA_OAEP_SHA256")]
            RsaOaepSha256
        };

        /// <value>
        /// The encryption algorithm to use to encrypt exportable key material from a key that persists on the server (as opposed to a key that 
        /// persists on a hardware security module and, therefore, cannot be exported). Specifying `RSA_OAEP_AES_SHA256` invokes the RSA AES key 
        /// wrap mechanism, which generates a temporary AES key. The temporary AES key is wrapped by the RSA public wrapping key provided along 
        /// with the request, creating a wrapped temporary AES key. The temporary AES key is also used to wrap the exportable key material. The 
        /// wrapped temporary AES key and the wrapped exportable key material are concatenated, producing concatenated blob output that jointly 
        /// represents them. Specifying `RSA_OAEP_SHA256` means that the exportable key material is wrapped by the RSA public wrapping key provided 
        /// along with the request.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Algorithm is required.")]
        [JsonProperty(PropertyName = "algorithm")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<AlgorithmEnum> Algorithm { get; set; }
    }
}
