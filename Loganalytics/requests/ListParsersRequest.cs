/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Oci.LoganalyticsService.Models;

namespace Oci.LoganalyticsService.Requests
{
    public class ListParsersRequest : Oci.Common.IOciRequest
    {
        
        /// <value>
        /// The Log Analytics namespace used for the request.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NamespaceName is required.")]
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Path, "namespaceName")]
        public string NamespaceName { get; set; }
        
        /// <value>
        /// isMatchAll
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "isMatchAll")]
        public System.Nullable<bool> IsMatchAll { get; set; }
        
        ///
        /// <value>
        /// source type
        /// </value>
        ///
        public enum SourceTypeEnum {
            [EnumMember(Value = "OS_FILE")]
            OsFile,
            [EnumMember(Value = "SYSLOG")]
            Syslog,
            [EnumMember(Value = "ODL")]
            Odl,
            [EnumMember(Value = "OS_WINDOWS_SYS")]
            OsWindowsSys
        };

        /// <value>
        /// source type
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sourceType")]
        public System.Nullable<SourceTypeEnum> SourceType { get; set; }
        
        /// <value>
        /// parserName
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "parserName")]
        public string ParserName { get; set; }
        
        /// <value>
        /// search by parser display name or description
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "parserDisplayText")]
        public string ParserDisplayText { get; set; }
        
        ///
        /// <value>
        /// parserType
        /// </value>
        ///
        public enum ParserTypeEnum {
            [EnumMember(Value = "ALL")]
            All,
            [EnumMember(Value = "REGEX")]
            Regex,
            [EnumMember(Value = "XML")]
            Xml,
            [EnumMember(Value = "JSON")]
            Json
        };

        /// <value>
        /// parserType
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "parserType")]
        public System.Nullable<ParserTypeEnum> ParserType { get; set; }
        
        ///
        /// <value>
        /// Is system param of value (all, custom, sourceUsing)
        /// 
        /// </value>
        ///
        public enum IsSystemEnum {
            [EnumMember(Value = "ALL")]
            All,
            [EnumMember(Value = "CUSTOM")]
            Custom,
            [EnumMember(Value = "BUILT_IN")]
            BuiltIn
        };

        /// <value>
        /// Is system param of value (all, custom, sourceUsing)
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "isSystem")]
        public System.Nullable<IsSystemEnum> IsSystem { get; set; }
        
        /// <value>
        /// The maximum number of items to return.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "limit")]
        public System.Nullable<int> Limit { get; set; }
        
        /// <value>
        /// The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "page")]
        public string Page { get; set; }
        
        ///
        /// <value>
        /// The sort order to use, either ascending (`ASC`) or descending (`DESC`).
        /// 
        /// </value>
        ///
        public enum SortOrderEnum {
            [EnumMember(Value = "ASC")]
            Asc,
            [EnumMember(Value = "DESC")]
            Desc
        };

        /// <value>
        /// The sort order to use, either ascending (`ASC`) or descending (`DESC`).
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortOrder")]
        public System.Nullable<SortOrderEnum> SortOrder { get; set; }
        
        ///
        /// <value>
        /// sort by parser
        /// </value>
        ///
        public enum SortByEnum {
            [EnumMember(Value = "name")]
            Name,
            [EnumMember(Value = "type")]
            Type,
            [EnumMember(Value = "sourcesCount")]
            SourcesCount,
            [EnumMember(Value = "timeUpdated")]
            TimeUpdated
        };

        /// <value>
        /// sort by parser
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortBy")]
        public System.Nullable<SortByEnum> SortBy { get; set; }
        
        /// <value>
        /// The client request ID for tracing.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Header, "opc-request-id")]
        public string OpcRequestId { get; set; }
    }
}