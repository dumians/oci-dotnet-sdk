/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// TestParserPayloadDetails
    /// </summary>
    public class TestParserPayloadDetails 
    {
        
        /// <value>
        /// content
        /// </value>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <value>
        /// description
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <value>
        /// Display name
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <value>
        /// encoding
        /// </value>
        [JsonProperty(PropertyName = "encoding")]
        public string Encoding { get; set; }

        /// <value>
        /// exampleContent
        /// </value>
        [JsonProperty(PropertyName = "exampleContent")]
        public string ExampleContent { get; set; }

        /// <value>
        /// fieldMaps
        /// </value>
        [JsonProperty(PropertyName = "fieldMaps")]
        public System.Collections.Generic.List<LogAnalyticsParserField> FieldMaps { get; set; }

        /// <value>
        /// footerRegex
        /// </value>
        [JsonProperty(PropertyName = "footerContent")]
        public string FooterContent { get; set; }

        /// <value>
        /// headerContent
        /// </value>
        [JsonProperty(PropertyName = "headerContent")]
        public string HeaderContent { get; set; }

        /// <value>
        /// name
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <value>
        /// isDefault
        /// </value>
        [JsonProperty(PropertyName = "isDefault")]
        public System.Nullable<bool> IsDefault { get; set; }

        /// <value>
        /// isSingleLineContent
        /// </value>
        [JsonProperty(PropertyName = "isSingleLineContent")]
        public System.Nullable<bool> IsSingleLineContent { get; set; }

        /// <value>
        /// isSystem
        /// </value>
        [JsonProperty(PropertyName = "isSystem")]
        public System.Nullable<bool> IsSystem { get; set; }

        /// <value>
        /// language
        /// </value>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <value>
        /// lastUpdatedDate
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }

        /// <value>
        /// logTypeTestRequestVersion
        /// </value>
        [JsonProperty(PropertyName = "logTypeTestRequestVersion")]
        public System.Nullable<int> LogTypeTestRequestVersion { get; set; }

        [JsonProperty(PropertyName = "metadata")]
        public UiParserTestMetadata Metadata { get; set; }

        /// <value>
        /// parser ignore linechars
        /// </value>
        [JsonProperty(PropertyName = "parserIgnorelineCharacters")]
        public string ParserIgnorelineCharacters { get; set; }

        /// <value>
        /// parser is hidden
        /// </value>
        [JsonProperty(PropertyName = "isHidden")]
        public System.Nullable<long> IsHidden { get; set; }

        /// <value>
        /// parser seq
        /// </value>
        [JsonProperty(PropertyName = "parserSequence")]
        public System.Nullable<int> ParserSequence { get; set; }

        /// <value>
        /// parser timezone
        /// </value>
        [JsonProperty(PropertyName = "parserTimezone")]
        public string ParserTimezone { get; set; }

        /// <value>
        /// isParserWrittenOnce
        /// </value>
        [JsonProperty(PropertyName = "isParserWrittenOnce")]
        public System.Nullable<bool> IsParserWrittenOnce { get; set; }

        /// <value>
        /// plugin instance list
        /// </value>
        [JsonProperty(PropertyName = "parserFunctions")]
        public System.Collections.Generic.List<LogAnalyticsParserFunction> ParserFunctions { get; set; }

        /// <value>
        /// tokenize original text
        /// </value>
        [JsonProperty(PropertyName = "shouldTokenizeOriginalText")]
        public System.Nullable<bool> ShouldTokenizeOriginalText { get; set; }
        ///
        /// <value>
        /// type
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "XML")]
            Xml,
            [EnumMember(Value = "JSON")]
            Json,
            [EnumMember(Value = "REGEX")]
            Regex,
            [EnumMember(Value = "ODL")]
            Odl
        };

        /// <value>
        /// type
        /// </value>
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }
    }
}
