/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// Generic field defining all attributes common to all querylanguage fields.
    /// 
    /// </summary>
    [JsonConverter(typeof(AbstractFieldModelConverter))]
    public class AbstractField 
    {
                ///
        /// <value>
        /// Field type classification.
        /// 
        /// </value>
        ///
        public enum NameEnum {
            [EnumMember(Value = "FIELD")]
            Field,
            [EnumMember(Value = "FIELDS")]
            Fields,
            [EnumMember(Value = "FUNCTION")]
            Function,
            [EnumMember(Value = "SORT")]
            Sort
        };

        /// <value>
        /// Field type classification.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Name is required.")]
        [JsonProperty(PropertyName = "name")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<NameEnum> Name { get; set; }

        /// <value>
        /// Field display name - will be alias if field is renamed by queryStrng.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <value>
        /// Field denoting if this is a declaration of the field in the queryString.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isDeclared")]
        public System.Nullable<bool> IsDeclared { get; set; }

        /// <value>
        /// Same as displayName unless field renamed in which case this will hold the original display names for the field
        /// across all renames.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "originalDisplayNames")]
        public System.Collections.Generic.List<string> OriginalDisplayNames { get; set; }

        /// <value>
        /// Internal identifier for the field.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "internalName")]
        public string InternalName { get; set; }

        /// <value>
        /// Field denoting field data type.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "valueType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ValueType> ValueType { get; set; }

        /// <value>
        /// Identifies if this field can be used as a grouping field in any grouping command.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isGroupable")]
        public System.Nullable<bool> IsGroupable { get; set; }

        /// <value>
        /// Identifies if this field format is a duration.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "isDuration")]
        public System.Nullable<bool> IsDuration { get; set; }

        /// <value>
        /// Alias of field if renamed by queryStrng.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "alias")]
        public string Alias { get; set; }

        /// <value>
        /// Query used to derive this field if specified.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "filterQueryString")]
        public string FilterQueryString { get; set; }
    }

    public class AbstractFieldModelConverter : JsonConverter
    {
        public override bool CanWrite => false;
        public override bool CanRead => true;
        public override bool CanConvert(System.Type type)
        {
            return type == typeof(AbstractField);
        }
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            throw new System.InvalidOperationException("Use default serialization.");
        }

        public override object ReadJson(JsonReader reader, System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            var jsonObject = JObject.Load(reader);
            var obj = default(AbstractField);
            var discriminator = jsonObject["name"].Value<string>();
            switch (discriminator)
            {
                case "FIELDS":
                    obj = new FieldsAddRemoveField();
                    break;
                case "FUNCTION":
                    obj = new FunctionField();
                    break;
                case "FIELD":
                    obj = new Field();
                    break;
                case "SORT":
                    obj = new SortField();
                    break;
            }
            serializer.Populate(jsonObject.CreateReader(), obj);
            return obj;
        }
    }
}
