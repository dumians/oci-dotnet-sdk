/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// Job details outlining parameters specified when job was submitted.
    /// 
    /// </summary>
    public class QueryWorkRequest 
    {
        
        /// <value>
        /// Unique OCID identifier to reference this query job work Request with.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <value>
        /// Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }

        /// <value>
        /// When the job was started.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "TimeStarted is required.")]
        [JsonProperty(PropertyName = "timeStarted")]
        public System.Nullable<System.DateTime> TimeStarted { get; set; }

        /// <value>
        /// When the work request was accepted. Should match timeStarted in all cases.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "timeAccepted")]
        public System.Nullable<System.DateTime> TimeAccepted { get; set; }

        /// <value>
        /// When the job finished execution.
        /// </value>
        [JsonProperty(PropertyName = "timeFinished")]
        public System.Nullable<System.DateTime> TimeFinished { get; set; }

        /// <value>
        /// When the job will expire.
        /// </value>
        [JsonProperty(PropertyName = "timeExpires")]
        public System.Nullable<System.DateTime> TimeExpires { get; set; }

        /// <value>
        /// Percentage progress completion of the query.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "percentComplete")]
        public System.Nullable<int> PercentComplete { get; set; }

        /// <value>
        /// Work request status.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "status")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<WorkRequestStatus> Status { get; set; }

        /// <value>
        /// Asynchronous action name.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "operationType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<QueryOperationType> OperationType { get; set; }

        /// <value>
        /// Current execution mode for the job.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Mode is required.")]
        [JsonProperty(PropertyName = "mode")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<JobMode> Mode { get; set; }

        /// <value>
        /// When the job was put in to the background.
        /// </value>
        [JsonProperty(PropertyName = "timeBackgroundAt")]
        public System.Nullable<System.DateTime> TimeBackgroundAt { get; set; }

        [JsonProperty(PropertyName = "timeFilter")]
        public TimeRange TimeFilter { get; set; }

        /// <value>
        /// List of filters applied when the query executed.
        /// 
        /// </value>
        [JsonProperty(PropertyName = "scopeFilters")]
        public System.Collections.Generic.List<ScopeFilter> ScopeFilters { get; set; }

        /// <value>
        /// Default subsystem to qualify fields with in the queryString if not specified.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SubSystem is required.")]
        [JsonProperty(PropertyName = "subSystem")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<SubSystemName> SubSystem { get; set; }

        /// <value>
        /// Display version of the user speciified queryString.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayQueryString is required.")]
        [JsonProperty(PropertyName = "displayQueryString")]
        public string DisplayQueryString { get; set; }

        /// <value>
        /// Internal version of the user specified queryString.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "InternalQueryString is required.")]
        [JsonProperty(PropertyName = "internalQueryString")]
        public string InternalQueryString { get; set; }
    }
}
