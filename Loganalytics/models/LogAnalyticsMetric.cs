/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// LogAnalyticsMetric
    /// </summary>
    public class LogAnalyticsMetric 
    {
        
        /// <value>
        /// aggregation field
        /// </value>
        [JsonProperty(PropertyName = "aggregationField")]
        public string AggregationField { get; set; }

        /// <value>
        /// bucket metadata
        /// </value>
        [JsonProperty(PropertyName = "bucketMetadata")]
        public string BucketMetadata { get; set; }

        /// <value>
        /// clock period
        /// </value>
        [JsonProperty(PropertyName = "clockPeriod")]
        public string ClockPeriod { get; set; }

        /// <value>
        /// description
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <value>
        /// edit version
        /// </value>
        [JsonProperty(PropertyName = "editVersion")]
        public System.Nullable<long> EditVersion { get; set; }

        /// <value>
        /// field name
        /// </value>
        [JsonProperty(PropertyName = "fieldName")]
        public string FieldName { get; set; }

        /// <value>
        /// field value array
        /// </value>
        [JsonProperty(PropertyName = "fieldValues")]
        public System.Collections.Generic.List<string> FieldValues { get; set; }

        /// <value>
        /// grouping fields
        /// </value>
        [JsonProperty(PropertyName = "groupingField")]
        public string GroupingField { get; set; }

        /// <value>
        /// is enabled flag
        /// </value>
        [JsonProperty(PropertyName = "isEnabled")]
        public System.Nullable<bool> IsEnabled { get; set; }

        /// <value>
        /// is system flag
        /// </value>
        [JsonProperty(PropertyName = "isSystem")]
        public System.Nullable<bool> IsSystem { get; set; }

        /// <value>
        /// metric display name
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <value>
        /// metric Id
        /// </value>
        [JsonProperty(PropertyName = "metricReference")]
        public System.Nullable<long> MetricReference { get; set; }

        /// <value>
        /// name
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        ///
        /// <value>
        /// metric type
        /// </value>
        ///
        public enum MetricTypeEnum {
            [EnumMember(Value = "COUNT")]
            Count,
            [EnumMember(Value = "SUM")]
            Sum,
            [EnumMember(Value = "AVERAGE")]
            Average,
            [EnumMember(Value = "COUNT_DISTRIBUTION")]
            CountDistribution,
            [EnumMember(Value = "SUM_DISTRIBUTION")]
            SumDistribution,
            [EnumMember(Value = "AVERAGE_DISTRIBUTION")]
            AverageDistribution
        };

        /// <value>
        /// metric type
        /// </value>
        [JsonProperty(PropertyName = "metricType")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<MetricTypeEnum> MetricType { get; set; }

        /// <value>
        /// is metric source map enabled flag
        /// </value>
        [JsonProperty(PropertyName = "isMetricSourceEnabled")]
        public System.Nullable<bool> IsMetricSourceEnabled { get; set; }
        ///
        /// <value>
        /// operator
        /// </value>
        ///
        public enum OperatorEnum {
            [EnumMember(Value = "CONTAINS_IGNORE_CASE")]
            ContainsIgnoreCase,
            [EnumMember(Value = "IN_IGNORE_CASE")]
            InIgnoreCase,
            [EnumMember(Value = "EQUAL_IGNORE_CASE")]
            EqualIgnoreCase,
            [EnumMember(Value = "NOT_NULL")]
            NotNull
        };

        /// <value>
        /// operator
        /// </value>
        [JsonProperty(PropertyName = "operator")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<OperatorEnum> Operator { get; set; }

        /// <value>
        /// sources
        /// </value>
        [JsonProperty(PropertyName = "sources")]
        public System.Collections.Generic.List<LogAnalyticsSource> Sources { get; set; }

        /// <value>
        /// entity type
        /// </value>
        [JsonProperty(PropertyName = "entityType")]
        public string EntityType { get; set; }

        /// <value>
        /// last updated date
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }

        /// <value>
        /// unit type
        /// </value>
        [JsonProperty(PropertyName = "unitType")]
        public string UnitType { get; set; }

        /// <value>
        /// user customized
        /// </value>
        [JsonProperty(PropertyName = "isUserCustomized")]
        public System.Nullable<bool> IsUserCustomized { get; set; }
    }
}
