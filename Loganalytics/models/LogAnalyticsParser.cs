/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.LoganalyticsService.Models
{
    /// <summary>
    /// LoganParserDetails
    /// </summary>
    public class LogAnalyticsParser 
    {
        
        /// <value>
        /// content
        /// </value>
        [JsonProperty(PropertyName = "content")]
        public string Content { get; set; }

        /// <value>
        /// description
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <value>
        /// display name
        /// </value>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <value>
        /// edit version
        /// </value>
        [JsonProperty(PropertyName = "editVersion")]
        public System.Nullable<long> EditVersion { get; set; }

        /// <value>
        /// encoding
        /// </value>
        [JsonProperty(PropertyName = "encoding")]
        public string Encoding { get; set; }

        /// <value>
        /// example content
        /// </value>
        [JsonProperty(PropertyName = "exampleContent")]
        public string ExampleContent { get; set; }

        /// <value>
        /// fields Maps
        /// </value>
        [JsonProperty(PropertyName = "fieldMaps")]
        public System.Collections.Generic.List<LogAnalyticsParserField> FieldMaps { get; set; }

        /// <value>
        /// footer regular expression
        /// </value>
        [JsonProperty(PropertyName = "footerContent")]
        public string FooterContent { get; set; }

        /// <value>
        /// header content
        /// </value>
        [JsonProperty(PropertyName = "headerContent")]
        public string HeaderContent { get; set; }

        /// <value>
        /// Name
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <value>
        /// is default flag
        /// </value>
        [JsonProperty(PropertyName = "isDefault")]
        public System.Nullable<bool> IsDefault { get; set; }

        /// <value>
        /// is single line content
        /// </value>
        [JsonProperty(PropertyName = "isSingleLineContent")]
        public System.Nullable<bool> IsSingleLineContent { get; set; }

        /// <value>
        /// is system flag
        /// </value>
        [JsonProperty(PropertyName = "isSystem")]
        public System.Nullable<bool> IsSystem { get; set; }

        /// <value>
        /// language
        /// </value>
        [JsonProperty(PropertyName = "language")]
        public string Language { get; set; }

        /// <value>
        /// last updated date
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }

        /// <value>
        /// log type test request version
        /// </value>
        [JsonProperty(PropertyName = "logTypeTestRequestVersion")]
        public System.Nullable<int> LogTypeTestRequestVersion { get; set; }

        /// <value>
        /// mapped parser list
        /// </value>
        [JsonProperty(PropertyName = "mappedParsers")]
        public System.Collections.Generic.List<LogAnalyticsParser> MappedParsers { get; set; }

        /// <value>
        /// parser ignore line characters
        /// </value>
        [JsonProperty(PropertyName = "parserIgnorelineCharacters")]
        public string ParserIgnorelineCharacters { get; set; }

        /// <value>
        /// is hidden flag
        /// </value>
        [JsonProperty(PropertyName = "isHidden")]
        public System.Nullable<bool> IsHidden { get; set; }

        /// <value>
        /// sequence
        /// </value>
        [JsonProperty(PropertyName = "parserSequence")]
        public System.Nullable<int> ParserSequence { get; set; }

        /// <value>
        /// time zone
        /// </value>
        [JsonProperty(PropertyName = "parserTimezone")]
        public string ParserTimezone { get; set; }

        [JsonProperty(PropertyName = "parserFilter")]
        public LogAnalyticsParserFilter ParserFilter { get; set; }

        /// <value>
        /// write once
        /// </value>
        [JsonProperty(PropertyName = "isParserWrittenOnce")]
        public System.Nullable<bool> IsParserWrittenOnce { get; set; }

        /// <value>
        /// plugin instance list
        /// </value>
        [JsonProperty(PropertyName = "parserFunctions")]
        public System.Collections.Generic.List<LogAnalyticsParserFunction> ParserFunctions { get; set; }

        /// <value>
        /// sources using this parser
        /// </value>
        [JsonProperty(PropertyName = "sourcesCount")]
        public System.Nullable<long> SourcesCount { get; set; }

        /// <value>
        /// sources using list
        /// </value>
        [JsonProperty(PropertyName = "sources")]
        public System.Collections.Generic.List<LogAnalyticsSource> Sources { get; set; }

        /// <value>
        /// tokenize original text
        /// </value>
        [JsonProperty(PropertyName = "shouldTokenizeOriginalText")]
        public System.Nullable<bool> ShouldTokenizeOriginalText { get; set; }
        ///
        /// <value>
        /// type
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "XML")]
            Xml,
            [EnumMember(Value = "JSON")]
            Json,
            [EnumMember(Value = "REGEX")]
            Regex,
            [EnumMember(Value = "ODL")]
            Odl
        };

        /// <value>
        /// type
        /// </value>
        [JsonProperty(PropertyName = "type")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<TypeEnum> Type { get; set; }

        /// <value>
        /// user deleted flag
        /// </value>
        [JsonProperty(PropertyName = "isUserDeleted")]
        public System.Nullable<bool> IsUserDeleted { get; set; }
    }
}
