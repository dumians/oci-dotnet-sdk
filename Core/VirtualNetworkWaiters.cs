/*
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.

using System.Linq;
using Oci.Common.Waiters;
using Oci.CoreService.Models;
using Oci.CoreService.Requests;
using Oci.CoreService.Responses;

namespace Oci.CoreService
{
    /// <summary>
    /// Contains collection of helper methods to produce Oci.Common.Waiters for different resources of VirtualNetwork.
    /// </summary>
    public class VirtualNetworkWaiters
    {
        private readonly VirtualNetworkClient client;
        private readonly Oci.WorkrequestsService.WorkRequestClient workRequestClient;

        public  VirtualNetworkWaiters(VirtualNetworkClient client, Oci.WorkrequestsService.WorkRequestClient workRequestClient)
        {
            this.client = client;
            this.workRequestClient = workRequestClient;
        }

        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDrgCompartmentRequest, ChangeDrgCompartmentResponse> ForChangeDrgCompartment(ChangeDrgCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeDrgCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeDrgCompartmentRequest, ChangeDrgCompartmentResponse> ForChangeDrgCompartment(ChangeDrgCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeDrgCompartmentRequest, ChangeDrgCompartmentResponse>(() =>
            {
                var response = client.ChangeDrgCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSubnetCompartmentRequest, ChangeSubnetCompartmentResponse> ForChangeSubnetCompartment(ChangeSubnetCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeSubnetCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeSubnetCompartmentRequest, ChangeSubnetCompartmentResponse> ForChangeSubnetCompartment(ChangeSubnetCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeSubnetCompartmentRequest, ChangeSubnetCompartmentResponse>(() =>
            {
                var response = client.ChangeSubnetCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeVcnCompartmentRequest, ChangeVcnCompartmentResponse> ForChangeVcnCompartment(ChangeVcnCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeVcnCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeVcnCompartmentRequest, ChangeVcnCompartmentResponse> ForChangeVcnCompartment(ChangeVcnCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeVcnCompartmentRequest, ChangeVcnCompartmentResponse>(() =>
            {
                var response = client.ChangeVcnCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeVlanCompartmentRequest, ChangeVlanCompartmentResponse> ForChangeVlanCompartment(ChangeVlanCompartmentRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForChangeVlanCompartment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ChangeVlanCompartmentRequest, ChangeVlanCompartmentResponse> ForChangeVlanCompartment(ChangeVlanCompartmentRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ChangeVlanCompartmentRequest, ChangeVlanCompartmentResponse>(() =>
            {
                var response = client.ChangeVlanCompartment(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteByoipRangeRequest, DeleteByoipRangeResponse> ForDeleteByoipRange(DeleteByoipRangeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForDeleteByoipRange(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<DeleteByoipRangeRequest, DeleteByoipRangeResponse> ForDeleteByoipRange(DeleteByoipRangeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<DeleteByoipRangeRequest, DeleteByoipRangeResponse>(() =>
            {
                var response = client.DeleteByoipRange(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetByoipRangeRequest, GetByoipRangeResponse> ForByoipRange(GetByoipRangeRequest request, params ByoipRange.LifecycleStateEnum[] targetStates)
        {
            return this.ForByoipRange(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetByoipRangeRequest, GetByoipRangeResponse> ForByoipRange(GetByoipRangeRequest request, WaiterConfiguration config, params ByoipRange.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetByoipRangeRequest, GetByoipRangeResponse>(
                request,
                request => client.GetByoipRange(request),
                response => targetStates.Contains(response.ByoipRange.LifecycleState.Value),
                targetStates.Contains(ByoipRange.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetByoipRangeRequest, GetByoipRangeResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCrossConnectRequest, GetCrossConnectResponse> ForCrossConnect(GetCrossConnectRequest request, params CrossConnect.LifecycleStateEnum[] targetStates)
        {
            return this.ForCrossConnect(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCrossConnectRequest, GetCrossConnectResponse> ForCrossConnect(GetCrossConnectRequest request, WaiterConfiguration config, params CrossConnect.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetCrossConnectRequest, GetCrossConnectResponse>(
                request,
                request => client.GetCrossConnect(request),
                response => targetStates.Contains(response.CrossConnect.LifecycleState.Value),
                targetStates.Contains(CrossConnect.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetCrossConnectRequest, GetCrossConnectResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCrossConnectGroupRequest, GetCrossConnectGroupResponse> ForCrossConnectGroup(GetCrossConnectGroupRequest request, params CrossConnectGroup.LifecycleStateEnum[] targetStates)
        {
            return this.ForCrossConnectGroup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetCrossConnectGroupRequest, GetCrossConnectGroupResponse> ForCrossConnectGroup(GetCrossConnectGroupRequest request, WaiterConfiguration config, params CrossConnectGroup.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetCrossConnectGroupRequest, GetCrossConnectGroupResponse>(
                request,
                request => client.GetCrossConnectGroup(request),
                response => targetStates.Contains(response.CrossConnectGroup.LifecycleState.Value),
                targetStates.Contains(CrossConnectGroup.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetCrossConnectGroupRequest, GetCrossConnectGroupResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDhcpOptionsRequest, GetDhcpOptionsResponse> ForDhcpOptions(GetDhcpOptionsRequest request, params DhcpOptions.LifecycleStateEnum[] targetStates)
        {
            return this.ForDhcpOptions(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDhcpOptionsRequest, GetDhcpOptionsResponse> ForDhcpOptions(GetDhcpOptionsRequest request, WaiterConfiguration config, params DhcpOptions.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDhcpOptionsRequest, GetDhcpOptionsResponse>(
                request,
                request => client.GetDhcpOptions(request),
                response => targetStates.Contains(response.DhcpOptions.LifecycleState.Value),
                targetStates.Contains(DhcpOptions.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDhcpOptionsRequest, GetDhcpOptionsResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDrgRequest, GetDrgResponse> ForDrg(GetDrgRequest request, params Drg.LifecycleStateEnum[] targetStates)
        {
            return this.ForDrg(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDrgRequest, GetDrgResponse> ForDrg(GetDrgRequest request, WaiterConfiguration config, params Drg.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDrgRequest, GetDrgResponse>(
                request,
                request => client.GetDrg(request),
                response => targetStates.Contains(response.Drg.LifecycleState.Value),
                targetStates.Contains(Drg.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetDrgRequest, GetDrgResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDrgAttachmentRequest, GetDrgAttachmentResponse> ForDrgAttachment(GetDrgAttachmentRequest request, params DrgAttachment.LifecycleStateEnum[] targetStates)
        {
            return this.ForDrgAttachment(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetDrgAttachmentRequest, GetDrgAttachmentResponse> ForDrgAttachment(GetDrgAttachmentRequest request, WaiterConfiguration config, params DrgAttachment.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetDrgAttachmentRequest, GetDrgAttachmentResponse>(
                request,
                request => client.GetDrgAttachment(request),
                response => targetStates.Contains(response.DrgAttachment.LifecycleState.Value)
            );
            return new Waiter<GetDrgAttachmentRequest, GetDrgAttachmentResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIPSecConnectionRequest, GetIPSecConnectionResponse> ForIPSecConnection(GetIPSecConnectionRequest request, params IPSecConnection.LifecycleStateEnum[] targetStates)
        {
            return this.ForIPSecConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIPSecConnectionRequest, GetIPSecConnectionResponse> ForIPSecConnection(GetIPSecConnectionRequest request, WaiterConfiguration config, params IPSecConnection.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIPSecConnectionRequest, GetIPSecConnectionResponse>(
                request,
                request => client.GetIPSecConnection(request),
                response => targetStates.Contains(response.IPSecConnection.LifecycleState.Value),
                targetStates.Contains(IPSecConnection.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetIPSecConnectionRequest, GetIPSecConnectionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIPSecConnectionTunnelRequest, GetIPSecConnectionTunnelResponse> ForIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest request, params IPSecConnectionTunnel.LifecycleStateEnum[] targetStates)
        {
            return this.ForIPSecConnectionTunnel(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIPSecConnectionTunnelRequest, GetIPSecConnectionTunnelResponse> ForIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest request, WaiterConfiguration config, params IPSecConnectionTunnel.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIPSecConnectionTunnelRequest, GetIPSecConnectionTunnelResponse>(
                request,
                request => client.GetIPSecConnectionTunnel(request),
                response => targetStates.Contains(response.IPSecConnectionTunnel.LifecycleState.Value),
                targetStates.Contains(IPSecConnectionTunnel.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetIPSecConnectionTunnelRequest, GetIPSecConnectionTunnelResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetInternetGatewayRequest, GetInternetGatewayResponse> ForInternetGateway(GetInternetGatewayRequest request, params InternetGateway.LifecycleStateEnum[] targetStates)
        {
            return this.ForInternetGateway(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetInternetGatewayRequest, GetInternetGatewayResponse> ForInternetGateway(GetInternetGatewayRequest request, WaiterConfiguration config, params InternetGateway.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetInternetGatewayRequest, GetInternetGatewayResponse>(
                request,
                request => client.GetInternetGateway(request),
                response => targetStates.Contains(response.InternetGateway.LifecycleState.Value),
                targetStates.Contains(InternetGateway.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetInternetGatewayRequest, GetInternetGatewayResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIpv6Request, GetIpv6Response> ForIpv6(GetIpv6Request request, params Ipv6.LifecycleStateEnum[] targetStates)
        {
            return this.ForIpv6(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetIpv6Request, GetIpv6Response> ForIpv6(GetIpv6Request request, WaiterConfiguration config, params Ipv6.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetIpv6Request, GetIpv6Response>(
                request,
                request => client.GetIpv6(request),
                response => targetStates.Contains(response.Ipv6.LifecycleState.Value),
                targetStates.Contains(Ipv6.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetIpv6Request, GetIpv6Response>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse> ForLocalPeeringGateway(GetLocalPeeringGatewayRequest request, params LocalPeeringGateway.LifecycleStateEnum[] targetStates)
        {
            return this.ForLocalPeeringGateway(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse> ForLocalPeeringGateway(GetLocalPeeringGatewayRequest request, WaiterConfiguration config, params LocalPeeringGateway.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse>(
                request,
                request => client.GetLocalPeeringGateway(request),
                response => targetStates.Contains(response.LocalPeeringGateway.LifecycleState.Value),
                targetStates.Contains(LocalPeeringGateway.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse> ForLocalPeeringGateway(GetLocalPeeringGatewayRequest request, params LocalPeeringGateway.PeeringStatusEnum[] targetStates)
        {
            return this.ForLocalPeeringGateway(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse> ForLocalPeeringGateway(GetLocalPeeringGatewayRequest request, WaiterConfiguration config, params LocalPeeringGateway.PeeringStatusEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse>(
                request,
                request => client.GetLocalPeeringGateway(request),
                response => targetStates.Contains(response.LocalPeeringGateway.PeeringStatus.Value),
                targetStates.Contains(LocalPeeringGateway.PeeringStatusEnum.Revoked)
            );
            return new Waiter<GetLocalPeeringGatewayRequest, GetLocalPeeringGatewayResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNatGatewayRequest, GetNatGatewayResponse> ForNatGateway(GetNatGatewayRequest request, params NatGateway.LifecycleStateEnum[] targetStates)
        {
            return this.ForNatGateway(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNatGatewayRequest, GetNatGatewayResponse> ForNatGateway(GetNatGatewayRequest request, WaiterConfiguration config, params NatGateway.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetNatGatewayRequest, GetNatGatewayResponse>(
                request,
                request => client.GetNatGateway(request),
                response => targetStates.Contains(response.NatGateway.LifecycleState.Value),
                targetStates.Contains(NatGateway.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetNatGatewayRequest, GetNatGatewayResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNetworkSecurityGroupRequest, GetNetworkSecurityGroupResponse> ForNetworkSecurityGroup(GetNetworkSecurityGroupRequest request, params NetworkSecurityGroup.LifecycleStateEnum[] targetStates)
        {
            return this.ForNetworkSecurityGroup(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetNetworkSecurityGroupRequest, GetNetworkSecurityGroupResponse> ForNetworkSecurityGroup(GetNetworkSecurityGroupRequest request, WaiterConfiguration config, params NetworkSecurityGroup.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetNetworkSecurityGroupRequest, GetNetworkSecurityGroupResponse>(
                request,
                request => client.GetNetworkSecurityGroup(request),
                response => targetStates.Contains(response.NetworkSecurityGroup.LifecycleState.Value),
                targetStates.Contains(NetworkSecurityGroup.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetNetworkSecurityGroupRequest, GetNetworkSecurityGroupResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPublicIpRequest, GetPublicIpResponse> ForPublicIp(GetPublicIpRequest request, params PublicIp.LifecycleStateEnum[] targetStates)
        {
            return this.ForPublicIp(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPublicIpRequest, GetPublicIpResponse> ForPublicIp(GetPublicIpRequest request, WaiterConfiguration config, params PublicIp.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetPublicIpRequest, GetPublicIpResponse>(
                request,
                request => client.GetPublicIp(request),
                response => targetStates.Contains(response.PublicIp.LifecycleState.Value),
                targetStates.Contains(PublicIp.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetPublicIpRequest, GetPublicIpResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPublicIpPoolRequest, GetPublicIpPoolResponse> ForPublicIpPool(GetPublicIpPoolRequest request, params PublicIpPool.LifecycleStateEnum[] targetStates)
        {
            return this.ForPublicIpPool(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetPublicIpPoolRequest, GetPublicIpPoolResponse> ForPublicIpPool(GetPublicIpPoolRequest request, WaiterConfiguration config, params PublicIpPool.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetPublicIpPoolRequest, GetPublicIpPoolResponse>(
                request,
                request => client.GetPublicIpPool(request),
                response => targetStates.Contains(response.PublicIpPool.LifecycleState.Value),
                targetStates.Contains(PublicIpPool.LifecycleStateEnum.Deleted)
            );
            return new Waiter<GetPublicIpPoolRequest, GetPublicIpPoolResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse> ForRemotePeeringConnection(GetRemotePeeringConnectionRequest request, params RemotePeeringConnection.PeeringStatusEnum[] targetStates)
        {
            return this.ForRemotePeeringConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse> ForRemotePeeringConnection(GetRemotePeeringConnectionRequest request, WaiterConfiguration config, params RemotePeeringConnection.PeeringStatusEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse>(
                request,
                request => client.GetRemotePeeringConnection(request),
                response => targetStates.Contains(response.RemotePeeringConnection.PeeringStatus.Value),
                targetStates.Contains(RemotePeeringConnection.PeeringStatusEnum.Revoked)
            );
            return new Waiter<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse> ForRemotePeeringConnection(GetRemotePeeringConnectionRequest request, params RemotePeeringConnection.LifecycleStateEnum[] targetStates)
        {
            return this.ForRemotePeeringConnection(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse> ForRemotePeeringConnection(GetRemotePeeringConnectionRequest request, WaiterConfiguration config, params RemotePeeringConnection.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse>(
                request,
                request => client.GetRemotePeeringConnection(request),
                response => targetStates.Contains(response.RemotePeeringConnection.LifecycleState.Value),
                targetStates.Contains(RemotePeeringConnection.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetRemotePeeringConnectionRequest, GetRemotePeeringConnectionResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetRouteTableRequest, GetRouteTableResponse> ForRouteTable(GetRouteTableRequest request, params RouteTable.LifecycleStateEnum[] targetStates)
        {
            return this.ForRouteTable(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetRouteTableRequest, GetRouteTableResponse> ForRouteTable(GetRouteTableRequest request, WaiterConfiguration config, params RouteTable.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetRouteTableRequest, GetRouteTableResponse>(
                request,
                request => client.GetRouteTable(request),
                response => targetStates.Contains(response.RouteTable.LifecycleState.Value),
                targetStates.Contains(RouteTable.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetRouteTableRequest, GetRouteTableResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityListRequest, GetSecurityListResponse> ForSecurityList(GetSecurityListRequest request, params SecurityList.LifecycleStateEnum[] targetStates)
        {
            return this.ForSecurityList(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSecurityListRequest, GetSecurityListResponse> ForSecurityList(GetSecurityListRequest request, WaiterConfiguration config, params SecurityList.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSecurityListRequest, GetSecurityListResponse>(
                request,
                request => client.GetSecurityList(request),
                response => targetStates.Contains(response.SecurityList.LifecycleState.Value),
                targetStates.Contains(SecurityList.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetSecurityListRequest, GetSecurityListResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetServiceGatewayRequest, GetServiceGatewayResponse> ForServiceGateway(GetServiceGatewayRequest request, params ServiceGateway.LifecycleStateEnum[] targetStates)
        {
            return this.ForServiceGateway(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetServiceGatewayRequest, GetServiceGatewayResponse> ForServiceGateway(GetServiceGatewayRequest request, WaiterConfiguration config, params ServiceGateway.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetServiceGatewayRequest, GetServiceGatewayResponse>(
                request,
                request => client.GetServiceGateway(request),
                response => targetStates.Contains(response.ServiceGateway.LifecycleState.Value),
                targetStates.Contains(ServiceGateway.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetServiceGatewayRequest, GetServiceGatewayResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSubnetRequest, GetSubnetResponse> ForSubnet(GetSubnetRequest request, params Subnet.LifecycleStateEnum[] targetStates)
        {
            return this.ForSubnet(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetSubnetRequest, GetSubnetResponse> ForSubnet(GetSubnetRequest request, WaiterConfiguration config, params Subnet.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetSubnetRequest, GetSubnetResponse>(
                request,
                request => client.GetSubnet(request),
                response => targetStates.Contains(response.Subnet.LifecycleState.Value),
                targetStates.Contains(Subnet.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetSubnetRequest, GetSubnetResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVcnRequest, GetVcnResponse> ForVcn(GetVcnRequest request, params Vcn.LifecycleStateEnum[] targetStates)
        {
            return this.ForVcn(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVcnRequest, GetVcnResponse> ForVcn(GetVcnRequest request, WaiterConfiguration config, params Vcn.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVcnRequest, GetVcnResponse>(
                request,
                request => client.GetVcn(request),
                response => targetStates.Contains(response.Vcn.LifecycleState.Value),
                targetStates.Contains(Vcn.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetVcnRequest, GetVcnResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualCircuitRequest, GetVirtualCircuitResponse> ForVirtualCircuit(GetVirtualCircuitRequest request, params VirtualCircuit.LifecycleStateEnum[] targetStates)
        {
            return this.ForVirtualCircuit(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVirtualCircuitRequest, GetVirtualCircuitResponse> ForVirtualCircuit(GetVirtualCircuitRequest request, WaiterConfiguration config, params VirtualCircuit.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVirtualCircuitRequest, GetVirtualCircuitResponse>(
                request,
                request => client.GetVirtualCircuit(request),
                response => targetStates.Contains(response.VirtualCircuit.LifecycleState.Value),
                targetStates.Contains(VirtualCircuit.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetVirtualCircuitRequest, GetVirtualCircuitResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVlanRequest, GetVlanResponse> ForVlan(GetVlanRequest request, params Vlan.LifecycleStateEnum[] targetStates)
        {
            return this.ForVlan(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVlanRequest, GetVlanResponse> ForVlan(GetVlanRequest request, WaiterConfiguration config, params Vlan.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVlanRequest, GetVlanResponse>(
                request,
                request => client.GetVlan(request),
                response => targetStates.Contains(response.Vlan.LifecycleState.Value),
                targetStates.Contains(Vlan.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetVlanRequest, GetVlanResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVnicRequest, GetVnicResponse> ForVnic(GetVnicRequest request, params Vnic.LifecycleStateEnum[] targetStates)
        {
            return this.ForVnic(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<GetVnicRequest, GetVnicResponse> ForVnic(GetVnicRequest request, WaiterConfiguration config, params Vnic.LifecycleStateEnum[] targetStates)
        {
            var agent = new WaiterAgent<GetVnicRequest, GetVnicResponse>(
                request,
                request => client.GetVnic(request),
                response => targetStates.Contains(response.Vnic.LifecycleState.Value),
                targetStates.Contains(Vnic.LifecycleStateEnum.Terminated)
            );
            return new Waiter<GetVnicRequest, GetVnicResponse>(config, agent);
        }
        /// <summary>
        /// Creates a waiter using default wait configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="statuses">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ValidateByoipRangeRequest, ValidateByoipRangeResponse> ForValidateByoipRange(ValidateByoipRangeRequest request, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return this.ForValidateByoipRange(request, WaiterConfiguration.DefaultWaiterConfiguration, targetStates);
        }

        /// <summary>
        /// Creates a waiter using the provided configuration.
        /// </summary>
        /// <param name="request">Request to send.</param>
        /// <param name="config">Wait Configuration</param>
        /// <param name="targetStates">Desired resource states. If multiple states are provided then the waiter will return once the resource reaches any of the provided states</param>
        /// <returns>a new Oci.common.Waiter instance</returns>
        public Waiter<ValidateByoipRangeRequest, ValidateByoipRangeResponse> ForValidateByoipRange(ValidateByoipRangeRequest request, WaiterConfiguration config, params WorkrequestsService.Models.WorkRequest.StatusEnum[] targetStates)
        {
            return new Waiter<ValidateByoipRangeRequest, ValidateByoipRangeResponse>(() =>
            {
                var response = client.ValidateByoipRange(request).Result;
                var getWorkRequestRequest = new Oci.WorkrequestsService.Requests.GetWorkRequestRequest
                {
                    WorkRequestId = response.OpcWorkRequestId
                };
                workRequestClient.Waiters.ForWorkRequest(getWorkRequestRequest, config, targetStates).Execute();
                return response;
            });
        }
        
    }
}
